#!/usr/bin/python3

from utilities.colors import color
from utilities.tools import clear

# function to modify the given key if key length is less than the message
def generate_FinalKey(text,key):
    finalkey = ''
    key = key.replace(' ', '')      # key should not contain spaces

    # key length is longer than original message
    # cut the key upto the message length
    if len(key)>len(text):
        finalkey = key[:len(text)]

    # key length is lesser than message size
    # repeat the key upto the size of the message
    # (this process excludes everything except alphabets in the message)
    elif len(key)<len(text):
        finalkey = (key * (int(len(text)/len(key))+1)) [:len(text)]                 # generate key for all characters of message (alphanumeric)

        for c in range(len(text)):                                                # traverses the length of the original message            
            if not text[c].isalpha():                                             # checks if the character is not an alphabet
                finalkey = finalkey[:c] + text[c] + finalkey[c:len(finalkey)-1]   # replaces key alphabets with the exact special character
    
    return finalkey

# encryption function 
# takes in the plaintext and key to encrypt with
# and returns the encrpyted ciphertext
def encrypt(plain,key):
    
    # send for generation of key of correct length    
    key = generate_FinalKey(plain, key)

    # check if key contains numbers (not allowed)
    for ch in key:
        if ch.isdigit():
            print('{}[-]{} Key should only contain Alphabets!\n{}[!] Quitting...{}'.format(color.RED,color.END,color.RED,color.END))
            quit()

    plainASCII = [ord(char) for char in plain]          # ASCII list of plaintext
    keyASCII = [ord(char) for char in key]              # ASCII list of given key
    cipherASCII = []

    # traverse the length of the plaintext message
    for i in range(len(plain)):
        # check if plaintext character is an alphabet
        if plain[i].isalpha():
            for x in range(26):
                for y in range(26):
                    s=x+y
                    # check if the plaintext character and key character indices match 
                    # according to the Vigenere matrix generated by the loops
                    if chr(x+97)==chr(plainASCII[i]).lower() and chr(y+97)==chr(keyASCII[i]).lower():
                        if chr(plainASCII[i]).isupper():        # if original character was uppercase
                            cipherASCII.append(s%26+65)         # append the uppercase counterpart of the character
                            #print(chr(s%26+65),end='')
                        else:                                   # for lowercase plaintext
                            cipherASCII.append(s%26+97)         # append the lowercase ciphertext character
                            #print(chr(s%26+97),end='')
        
        # if plaintext character is not alphabet (numbers, special characters are out of scope)
        else:
            cipherASCII.append(plainASCII[i])                   # append the original non-alpha character to the ciphertext
            #print(chr(plainASCII[i]),end='')
    
    # create ciphertext string from ASCII list
    cipher = ''.join(map(chr,cipherASCII))
    return cipher

###################################################################################################

# decryption function 
# takes in the ciphertext and key used to encrypt
# and returns the decrpyted plaintext
def decrypt(cipher,key):
    
    # send for generation of key of correct length    
    key = generate_FinalKey(cipher, key)

    # check if key contains numbers (not allowed)
    for ch in key:
        if ch.isdigit():
            print('{}[-]{} Key should only contain Alphabets!\n{}[!] Quitting...{}'.format(color.RED,color.END,color.RED,color.END))
            quit()

    cipherASCII = [ord(char) for char in cipher]     # ASCII list of ciphertext
    keyASCII = [ord(char) for char in key]          # ASCII list of given key
    plainASCII = []

    # traverse the length of the plaintext message
    for i in range(len(cipher)):
        # check if plaintext character is an alphabet
        if cipher[i].isalpha():
            for x in range(26):
                for y in range(26):
                    s=x+y
                    # check if the plaintext character and key character indices match 
                    # according to the Vigenere matrix generated by the loops
                    if chr(s%26+97)==chr(cipherASCII[i]).lower() and chr(y+97)==chr(keyASCII[i]).lower():
                        if chr(cipherASCII[i]).isupper():        # if original character was uppercase
                            plainASCII.append(x+65)         # append the uppercase counterpart of the character
                            #print(chr(s%26+65),end='')
                        else:                                   # for lowercase plaintext
                            plainASCII.append(x+97)         # append the lowercase ciphertext character
                            #print(chr(s%26+97),end='')
        
        # if plaintext character is not alphabet (numbers, special characters are out of scope)
        else:
            plainASCII.append(cipherASCII[i])                   # append the original non-alpha character to the ciphertext
            #print(chr(plainASCII[i]),end='')
    
    # create ciphertext string from ASCII list
    plain = ''.join(map(chr,plainASCII))
    return plain

###################################################################################################

def run():

    try:
        clear()

        choice = input('{}[?]{} Encrypt or Decrypt? [e/d] : '.format(color.BLUE,color.END))
        if choice == 'e' or choice == 'E':
            pt = input('{}[?]{} Enter the Plaintext message to encrypt: '.format(color.BLUE,color.END))
            key = input('{}[?]{} Enter the Key to encrypt the message: '.format(color.BLUE,color.END))
            ciphertext = encrypt(pt, key)
            print('{}[+] The Ciphertext with Key = {}{}{} is: {}{}{}'.format(color.GREEN,color.YELLOW,key,color.GREEN,color.RED,ciphertext,color.END))
        elif choice == 'd' or choice == 'D':
            ct = input('{}[?]{} Enter the Ciphertext message to decrypt: '.format(color.BLUE,color.END))
            key = input('{}[?]{} Enter the Key to encrypt the message: '.format(color.BLUE,color.END))
            plaintext = decrypt(ct, key)
            print('{}[+] The Plaintext with Key = {}{}{} is : {}{}{}'.format(color.GREEN,color.YELLOW,key,color.GREEN,color.RED,plaintext,color.END))
        else:
            print('{}[-] Please provide a valid coice of action{}'.format(color.RED,color.END))
        quit()
    
    except KeyboardInterrupt:
        print('\n{}[!] Exiting...{}'.format(color.RED,color.END))
